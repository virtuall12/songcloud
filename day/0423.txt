(오전)PHP-----------------

다른 파일의 내용을 현재의 파일에 불러오기 위한 방법
파일에는 만약 변수가 선언되어 있다면??? 다른 곳에서 이를 사용할 수 있다.
- include, require

include : 같은 파일 여러 번 포함 가능/포함할 파일이 없어도 다음 코드 실행 -> 페이지
include_once : 같은 파일 한 번만 포함/포함할 파일이 없어도 다음 코드 실행
require : 같은 파일 여러 번 포함 가능/포함할 파일이 없으면 다음 코드 실행하지 않음 -> 변수
require_once : 같은 파일 한 번만 포함/포함할 파일이 없으면 다음 코드 실행하지 않음

 once 가 들어가면 한 페이지에서 해당 파일 한번만 적용할 수 있다. 

---------------- 실습 (3명의 학생의 5개 과목 점수를 이용하여 총점, 평균 구하기 ---
<!DOCTYPE html>
<html>
<head>
	<title>PHP 테스트</title>
	<style>
		h1, h2, h3 { color: #004466; }
	</style>
</head>
<body>

<?php
	$score = array( array(60,70,80,90,100),array(61,71,81,91,100), array(62,72,82,92,100));

	for ($i = 0; $i < 3; $i++)
	{	
			for ($j = 0; $j < 5; $j++)
			{
				echo " \$score[$i][$j] = ".$score[$i][$j]."<br>";				
			}
			echo "-----------------------<br>";
	}
	
	for ($i = 0; $i < 3; $i++)
	{	
		$sum = 0;
		for ($j = 0; $j < 5; $j++)
		{	
			$sum = $sum + $score[$i][$j];
		}
		$avg = $sum/$j;
		$student_num = $i + 1;
		echo "$student_num 번째 학생의 총점 : $sum, 평균 : $avg <br>";
		
	}
?>

</body>
</html>




(오후) 도커
root@docker01:~# cat /usr/sbin/deleteimg 
#!/bin/bash

docker image ls | grep -v SIZE | gawk '{print $3}' > /root/deleteimg.txt

for del in $(cat /root/deleteimg.txt)
do
	docker image rm $del -f
done

if [ $? -eq 0 ]
then
	echo "==== deleted all images ====="
else
	echo "==== ERROR OCCURED ====="
fi
root@docker01:~# 




 컨테이너의 구분
 1. OS 컨테이너
    centos:7 -> 컨테이너 -> BASE 이미지로 활용하는 경우 많은 

 2. 애플리케이션 컨테이너
    nginx, mariadb, mysql, httpd -> 컨테이너


root@docker01:~# docker container exec 2e1977575efc ping -c 3 www.google.com
PING www.google.com (216.58.220.100) 56(84) bytes of data.
64 bytes from syd10s01-in-f100.1e100.net (216.58.220.100): icmp_seq=1 ttl=127 time=31.8 ms
64 bytes from syd10s01-in-f100.1e100.net (216.58.220.100): icmp_seq=2 ttl=127 time=31.0 ms
64 bytes from syd10s01-in-f100.1e100.net (216.58.220.100): icmp_seq=3 ttl=127 time=31.1 ms

--- www.google.com ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2003ms
rtt min/avg/max/mdev = 31.028/31.322/31.804/0.343 ms
root@docker01:~# 


 이미지 만들기
 FROM -> base 이미지 지정
 RUN    -> 이미지에 특정 패키지 설치등의 명령어 실행     RUN  apt-get -y update , RUN yum -y install httpd
 VOLUME -> docker container run 에서는 3가지 방법 제공( NFS, 컨테이너 간 연결, 도커 볼륨)
                       도커 볼륨
                    VOLUME ["/var/log"]
                    VOLUME /var/log
                    VOLUME /var/log /var/lib 

 ENV  시스템 환경변수 를 이미지에 선언!!! -> env 를 통해 확인할 수 있는 전역 변수!!! 
 COPY 호스트에 있는 특정 파일, 디렉토리를 이미지에 부착!!!
 ADD   호스트에 있는 특정 파일, 디렉토리를 이미지에 부착!!! +
             원격지(http://www.test.com/test/a.jsp )
             tar, zip, gz  와 같이 패키지 또는 압축 파일의 경우에는 이를 압축 해제, 패키지 해제 하여
             이미지에 부착한다.
   
                      a.tar
              ----------          ADD a.tar /test   -> 컨테이너의 test 아래에 index.html, a/b.jpg 파일 존재
                  index.html
                     a.jpg, b.jpg 

 CMD                  : 이미지를 컨테이너로 배포할 시 컨테이너 시작과 함께 동작하는 명령어들을 입력
                               컨테이너 배포시 사용하는 옵션과 겹친다면 해당 명령은 실행되지 않는다.               

 ENTRYPOINT  :  (무조건 실행)

 ONBUILD  : 처음 이미지 생성시에는 영향이 없지만 이를 base 이미지로 사용한 다음 컨테이너를 배포할 때 
                       명령이 동작한다. 


 ----------- 저장소 (이미지 보관장소)-------------------------------------------------

    - 로컬 저장소                    : 도커가 설치된 자신의 컴퓨터 내에 있는 저장소이고 자신만 사용할 수 있다.
    - 퍼블릭(공인) 저장소     : 도커 허브와 같이 공개된 장소에 이미지를 보관하는 것을 의미하며 다른 모든 사람들이 검색, 다운로드 하여 사용할 수 있다.
    - 프라이빗(사설) 저장소  : 제한 된 인원만 접근이 가능한 저장소. 예를 들어 도커 내부에 유료 서비스를 이용하여 특정 계정에 대해서만 접근이 가능하도록 하는것. aws,gcp 의 사설 저장소를 이용할 경우 해당 프로젝트 내에 참여중인 사용자들만 다운로드 할 수 있다. 도커 레지스트리를 이용하여 회사 내부에 있는 서버에 사설 저장소를 구축하게 되면 회사 내 직원들만 접근이 가능하다. 
   
    
Quiz. 
- 로컬 저장소에 있는 이미지를 사설 저장소에 push 하고, 로컬 저장소 이미지는 삭제하라.
- 사설 저장소에서 이미지를 다운로드하여 이를 이용한 nginx 서비스를 배포하라!!!


step1. Dockerfile 로 nginx 서비스 가능한 이미지 생성하기
step2. registry 다운로드하여 사설 저장소 구축
step3. 기존에 만든 이미지를 사설저장소에 올릴 수 있는 이미지로 tag  를 변경한다.
step4. 사설저장소용 이미지는 사설 저장소에 push 하고 로컬 저장소에 있던 이미지는 삭제한다.
step5. 사설저장소로 부터 이미지를 다운로드하여 nginx 서비스를 배포한다.


 주의!!! 
  nginx 이미지로 컨테이너 생성시 웹서비스를 위한  기본 홈디렉토리 : /usr/share/nginx/html <- 컴파일설치
  ubuntu 이미지를 다운로드하여 RUN 으로 nginx 설치시 기본 디렉토리 : /var/www/html <- apt-get 설치



도커 컴포즈 설치 ---------
1. curl  -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
2. chmod +x /usr/local/bin/docker-compose
3. docker-compose -v

yml 또는 yaml -> 야믈 파일 

- 도커 컴포즈는 야믈파일에 작성된 환경 내용을 읽어 해당 내용에서 원하는 대로 컨테이너, 컨테이너간 연결, 볼륨, 네트워크 등을 만들어 준다. 
- key: value 형태로 모든 내용을 작성한다
- 동일 환경을 다시 만들거나 이를 확장하거나 약간의 수정이 있을 경우 매우 편리하게 사용할 수 있다. 
------------------- 실습 docker-compose.yml 파일 ------------------------------
version: '3.1'

services:

  wordpress:
    image: wordpress      # base 이미지
    restart: always            # docker 데몬이 재부팅 되더라도 항상 자동으로 실행된다. 
    ports:
      - 8080:80                   # 호스트의 8080 을 서비스(컨테이너)의 80  포트와 매핑한다.
    environment:               # -e 옵션과 동일
      - WORDPRESS_DB_HOST=db
      - WORDPRESS_DB_USER=exampleuser
      - WORDPRESS_DB_PASSWORD=examplepass
      - WORDPRESS_DB_NAME=exampledb
    volumes:
      - wordpress:/var/www/html   #로컬에 wordpress 디스크(볼륨)를 만들고 이를 컨테이너에 부착
    depends_on:
      - db                                      # 실행 순서를 결정한다.  db가 완전히 안정적으로 동작한 뒤에 실행되는 것은 아님. 그냥 실행 순서만 결정 

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      MYSQL_ROOT_PASSWORD: test123
    volumes:
      - db:/var/lib/mysql

volumes:
  wordpress:
  db:

# 둘 사이의 연결은 links 필요없이 그냥 연결된다. 
------------------------------------------------------------------------
cd ~ 
vi docker-compose.yml 

yml 파일의 구분

버전 지정
서비스 지정 : 컨테이너에 대한 spec
볼륨 지정    : 컨테이너가 사용할 볼륨 지정  (옵션)
네트워크지정 : 컨테이너 연결을 위한 네트워크 지정 (옵션) 

------- 네트워크 정의에 의해 생성된 볼륨 --------------
Creating network "root_default" with the default driver

----- 볼륨 정의에 의해 생성된 볼륨 -------------------
Creating volume "root_wordpress" with default driver
Creating volume "root_db" with default driver

-- 서비스 정의에 의해 생성된 컨테이너-----------
Creating root_db_1 ... done
Creating root_wordpress_1 ... done



줄 맞춤!!! 매우 중요 
[tabl] 인식 못하므로 space bar 를 이용해야 함. 일반적으로 2,4, 6 또는 3,6,9 단위로 띄어쓰기 함
key: value   "key:" 작성후 띄어쓰기 한다.















