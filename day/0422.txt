오전 PHP

Quiz. 직전에 실습한 내용을 응용하여 왼쪽에는 숫자, 오른쪽에는 구분를 만들고
아래와 같이 표기 되도록 하라

 숫자     구분
   1        홀수
   2        짝수
   .           .
  10       짝수 






 outer for -> 단 을 표기 (2 - 9, ++)
      inner for -> (1-9, ++)
        외부에서 가져온 단 X  (1~9) = 값표현


 Quiz. 입력된 유저명과 패스워드를 확인하여 둘다 매치 된다면 화면에는 
"회원페이지 입니다" 가 출력되고, 하나라도 매치 되지 않는다면 화면에는 "로그인 실패" 가
뜨도록 하라
 
 연관배열 사용하라.
   $username = "user" ;
   $password = "pass" ;

  $db_data["username"] = "user";
  $db_data["password"] = "pass";








--- 오후 도커 --------------
 컨테이너 라이프 사이클 관리

 docker container run 

 이미지 만들기 -> Dockerfile 이용하여 만들기 -> 기본적으로 로컬 저장소에 저장
 -> 사설저장소, 퍼블릭 저장소에 업로드 하여 다른 사용자와 공유하여 사용할 수 있다.

볼륨사용하기!!!
볼륨은 디스크라고 생각하자!!

컨테이너의 자료는 영구적인 자료가 아니므로 이를 사전에 백업할 수 있는 기술이 필요하다. 이를 volume 을 사용하여 해결할 수 있다.

1. 컨테이너의 특정 디렉토리를 호스트의 특정 디렉토리와 마운트 한다.  -> NFS
docker container run -e MYSQL_ROOT_PASSWORD=PASSWORD1 -e MYSQL_USER=wpuser -e MYSQL_PASSWORD=PASSWORD2 -e MYSQL_DATABASE=wordpress_db -v /home/user1/0422/wordpress_db:/var/lib/mysql --name wordpressdb -d mariadb

  -> 호스트의 /home/user1/0422/wordpress_db 디렉토리와 컨테이너의 /var/lib/mysql 를 마운트 한다. 따라서 호스트에서 위의 디렉토리를 열어보면 데이터를 확인할 수 있다.

docker container run -e WORDPRESS_DB_USER=wpuser -e WORDPRESS_DB_PASSWORD=PASSWORD2 -e WORDPRESS_DB_NAME=wordpress_db -p 8081:80 -v /home/user1/0422/html:/var/www/html --link wordpressdb:mysql --name wpcontainer -d wordpress




3. 도커 볼륨을 사용한다. *  Dockerfile 에서는 옵션으로 VOL 을 사용하여 볼륨 사용이 가능한데 이때 "3"도커 볼륨만 지원한다. 
호스트에 가상의 디스크를 만들고 이를 컨테이너의 특정 디렉토리로 사용한다.

  1. 새로운 디스크를 생성한다.
      docker volume create --name testvol
  2. 생성된 볼륨을 컨테이너에 부착한다.
      docker container run -it --name ubuntu01 -v testvol:/root ubuntu /bin/bash
  3. 컨테이너에 들어가서 /root 아래에 파일을 만들어본다.
  4. 생성된 컨테이너를 삭제한다.
  5. 볼륨은 여전히 존재하므로 이를 다른 컨테이너에 부착한다.
  docker container run -it --name ubuntu02 -v testvol:/root ubuntu /bin/bash
   6. 새로 생성된 컨테이너에서 ls /root 를 해보면 기존 컨테이너에서 생성했던 파일이 보인다.

user1@docker01:~/0422$ docker volume inspect testvol
[
    {
        "CreatedAt": "2021-04-22T15:05:42+09:00",
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/testvol/_data",
        "Name": "testvol",
        "Options": {},
        "Scope": "local"
    }
]
user1@docker01:~/0422$ sudo ls /var/lib/docker/volumes/testvol/_data
 ->  생성된 파일 확인 가능

 Dockerfile

 FROM : 베이스 이미지 지정 : 제일 위에 작성
 RUN : 설치등의 명령어 실행
 EXPOSE : 이미지에서 오픈할 포트 선택 예를 들어 EXPOSE 80 이라고 하면 컨테이너 서비스 실행시 80번 포트가 오픈된다.
 CMD : 이미지에서의 실행이 아니라.. 컨테이너가 실행되면 시작해야할 명령어를 작성한다.
 예를 들어 컨테이너실행시 웹 서버를 실행해야 한다면 CMD 를 이용하여 httpd 또는 nginx 를 실행한다. CMD는 파일내에서 1번 사용할 수 있다. 일반적으로 가장 아래에서 사용된다.
 
 ENTRYPOINT : CMD 와 동일하게 컨테이너 실행시 전달할 명령어를 작성한다.  CMD 와 마찬가지로 파일 내에서 1번만 사용할 수 있다.


 Dockerfile
 FROM ubuntu
 COPY tst.sh /root
 ENTRYPOINT ["top"] -> 컨테이너 실행시 무조건 실행
 CMD ["-d", "10"] -> 컨테이너 실행시 docker run 에서 동일한 옵션이 있을 경우 실행되지 않음

 만약 컨테이너 실행시 웹서버 하나만 띄우는 것이 아니라 다양한 명령 실행이 필요하다면 
 CMD ["./tst.sh"]












 COPY : 호스트에 있는 파일 또는 디렉토리를 컨테이너의 특정 디렉토리에 부착할 수 있다.

 ADD : COPY 와 동일하고 추가적으로, 웹 상의 파일을 불러올 수 있다.
              또한 패키지 파일이 있다면 이를 압축 해제하여 디렉토리에 부착한다.

     COPY test.tar /var/www/html  ->  [컨테이너에서] ls /var/www/html
                                                                                                          test.tar

      ADD test.tar /var/www/html -> ls /var/www/html
                                                                          a.jpg index.php b.jpg TESTDIR

 
 ENV : 환경변수 -> HOSTNAME=kvm1, USER=root 

 ENV MYNAM "user1"
 ENV MYORDER "coffee"

 ENV MYNAME="user1" MYORDER="coffee"


 볼륨(VOLUME)
  이미지에 볼륨을 할당하고자 할 때 사용한다.

  VOLUME ["/var/log"]
  VOLUME /var/log        -> 컨테이너의 /var/log 디렉토리를 호스트의 가장 디스크와 연결
  VOLUME /var/log /var/db   두개의 디렉토리를 연결하기 위한 디스크가 만들어진다.


실습 -----------------
docker container run --name mariadb01 -d -e MYSQL_ROOT_PASSWORD=test123 -e MYSQL_DATABASE=sqldb mariadb/server:10.2

QUIZ. 이미지 만들기
CentOS : 7 이미지를 다운로드하고
httpd, php, php-mysql, mariadb-client, mysql 를 설치하라
현재 위치 아래에 만들어져 있는 index.html 파일을 컨테이너의 /var/www/html 에 부착한다
마지막으로 컨테이너 실행시 httpd 가 동작해야 한다. 
(CMD /usr/sbin/httpd -D FOREGROUND)

또한 생성된 컨테이너로 /bin/bash 연결가능해야 한다.

도커 파일로 이미지 만들기 => docker build -t 이미지명:태그명 .   

이미지 생성후 컨테이너로 배포하라!!!


ONBUILD !!! <----클라우드 TA 또는 PM 또는 PL 이 진행해야 함

환경(인프라)-개발(웹)-DB


WORKDIR 은 도커파일 내에서 작업 위치를 지정해 준다.
경로 이동시 사용하는 방법

WORKDIR /var/www/html
/*
RUN touch index.html
... 이공간에서 이루어지는 모든 작업은 /var/www/html 내에서 이루어진다. 
*/
WORKDIR /etc/




ADD http://www.test.com/index.php /var/www/html
                       /var/www/html/index.php!

ADD http://www.test.com/a.zip /var/www/html
                       /var/www/html/a.zip

ADD a.zip /var/www/html
                      /var/www/htm/index.php
                      /var/www/html/img/a.jpg
                                                                /b.jpg     
             

이미지 만들기 !!!  nginx 이용하여 웹서비스 하기
VOLUME !!!! 












