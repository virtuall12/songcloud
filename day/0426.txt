오전 (PHP) ---------------------------

실습 ---------- 입장권 가격 구하기 -------------------------------

<?php
	function cal_fee1($day, $age) // 일반 입장권 요금 구하기
	{
		if ($day == "주간")
		{
			if ($age > 12 && age < 65)
				$money = 26000;
			else
				$money = 19000;
		}
		else
		{
			if ($age > 12 && $age < 65)
				$money = 21000;
			else
				$money = 16000;
		}
		return $money;
	}
	
	function cal_fee2($day, $age) // 자유 이용권 요금 구하기
	{
		if ($day == "주간")
		{
			if ($age > 12 && $age < 65)
				$money = 33000;
			else
				$money = 24000;
		}
		else
		{
			if ($age > 12 && $age < 65)
				$money = 28000;
			else
				$money = 21000;
		}
		
		return $money;
	}
	
	function cal_fee3($age) //2일 자유 이용권 요금 구하기
	{
		if ($age > 12 && $age < 65)
			$money = 55000;
		else
			$money = 40000;
			
		return $money;
	}
	
	function cal_fee4($age) // 콤비권 구하기
	{
		if ($age > 12 && $age < 65)
			$money = 54000;
		else
			$money = 40000;
			
		return $money;
	}
	
	// $category: 1 => 일반, 2 => 자유 이용권, 3 => 2일 자유 이용권, 4 => 콤비권 / 이용자 선택 사항
	$category = 1 ; // 입장권 종류
	$age = 24 ;
	$day = "야간";
	
	if ($category == 1)
		$fee = cal_fee1($day, $age);
	elseif ($category == 2)
		$fee = cal_fee2($day, $age);
	elseif ($cal_fee3 == 3)
		$fee = cal_fee3($age);
	else
		$fee = cal_fee4($age);
		
	if ($category == 1)
		$cat = "일반 입장권";
	elseif ($category == 2)
		$cat = "자유 이용권";
	elseif ($cal_fee3 == 3)
		$cat = "2일 자유 이용권";
	else
		$cat = "콤비권";
		
	echo "- 구분 : $cat<br>";
	
	if ($category == 1 || $category == 2)
		echo "- 주야간 : $day<br>";
	
	echo "- 나이 : $age 세<br>";
	echo "-입장료 : $fee 원";
			
?>	
-------------------------------------------------------------

apt install php libapache2-mod-php
systemctl restart apache2

------------------------------
1. /etc/sudoers 파일에 www-data ALL=NOPASSWD: ALL 입력
아파치 설치 뒤 위의 계정이 생성되나, 실행 권한을 부여해 주어야 합니다.

root@docker01:~# cat /etc/sudoers | grep www-data
www-data ALL=NOPASSWD: ALL
root@docker01:~# 

2. 이제 아파치 권한으로 시스템 함수내에 명령어를 실행하면 실행이 가능합니다
/var/www/html/check.php 파일에 아래 내용을 입력해 보세요
<?php
  
        system("whoami");
        system("sudo mkdir /var/www/html/test");
?>


3. 웹으로 접속하면 해당 명령이 실행됩니다.
root@docker01:/var/www/html# ls
check.php  index.html  test
root@docker01:/var/www/html# 


(오후) 도커 ------------------------------------------------------

워드프레스 서비스 실행 using "run"
- 1. DB 컨테이너 생성(-e 옵션으로 DB 관련 사용자, 패스워드, DB 네임 지정)
- 2.  WP 컨테이너 생성 ( - e 옵션으로는 DB 컨테이너와의 연결 내용, --link 를 통해 DB 컨테이너 연결 지정, -p 옵션으로 호스트의 포트와 컨테이너의 포트 매핑) 

문제점 : 동일 서비스 환경을 또 만들어야 한다면??? 또 이를 수정해야 한다면?? 

-> 전체 환경(컨테이너생성/연결, 볼륨 생성/연결, 네트워크 생성/연결)  을 하나의 종이에 작성해 두고 이를 실행하는 방법.  yml 파일(docker-compose.yml) -> 도커 컴포즈

도커 컴포즈의 단점 : 외부 포트와 연결해야하는 컨테이너가 동시에 두개가 실행된다면??? 


여러대의 서버에서 컴포즈를 실행하는 방법. 




컴포즈 작성시 유의 사항 :  들여쓰기!!! 
메인 작성 사항 : 

version : '3.1'

services:  <---- 컨테이너 
  wordpress: wordpress
  restart: always
  ports:
    - 8080:80   
    - 4433:443
  environment:
    - WORDPRESS_DB_HOST=db
  volues:
    - wordpress:/var/www/html
  depends_on:  <--- 실행순서 결정
    - db 

  db: 



volumes, networks





docker-compose up -d    : 로컬에 있는 docker-compose.yml 파일을 읽고 해당 내용에 맞게 환경을 구성한다. 단 실행된 서비스(컨테이너)는 백그라운드에서 동작한다.

docker-compose ps   : 실행 중인 컨테이너들을 확인할 수 있다. (docker container ls 는 컴포즈로 실행한 컨테이너와 run 으로 실행한 컨테이너를 모두 볼 수 있다)

docker-compose stop : 실행중인 서비스 종료
docker-compose down : 컴포즈로 실행한 모든 컨테이너를 내린다


클러스터 : 클러스터를 구성하게되면 자원공유가 가능해 진다. 일종의 하나의 풀에 물리 자원들을 모두 넣고 사용하는 것이다. 


                      역할                 hostname         IP address
docker01   manager          manager01      211.183.3.100 
docker02   worker             worker01          211.183.3.101
docker03   worker             worker02          211.183.3.102
docker04   worker             worker03          211.183.3.103

 모든 노드에는 아래의 내용을 /etc/hosts 에 등록한다.

211.183.3.100	manager01
211.183.3.101	worker01
211.183.3.102	worker02
211.183.3.103	worker03

모든 구성이 완료되면 ping -c 3 manager01

 manager 노드 : 클러스터 내부에서 작업을 주도하는 서버를 의미하며 클러스터 내부에 1대 이상 존재해야한다. 
                             기본적으로 manager 는 worker 의 기능을 겸업한다. 

 worker 노드 : manager 의 작업 지시를 받아서 이를 수행하는 서버

 manager 와 worker 는 반드시 동일 네트워크상에 배치되어야 하는 것은 아니다!! 물리적으로 떨어져 있는 상태에서도 클러스터링이 가능하다. 
 manager 를 하나만 사용할 경우 만약 manager 가 down 되면 작업지시를 할 수 없음로 보통은 이중화를 위해 manager 2대 이상 배치한다. 

 worker 를 manager 로 에스컬레이션(권한상승-promote) 할 수 있다. 또는 반대의 경우(demote)도 가능하다. 

 되도록이면 실행은 CLI 에서 진행한다.
  sudo systemctl enable multi-user.target --force
  sudo systemctl set-default multi-user.target
  sudo reboot


토큰 발행 이후 manager 를 2개로 늘리고 싶다면??
1. 첫번째 방법
user1@manager01:~$ docker swarm init --advertise-addr 211.183.3.100  <-- 토큰발행하고 이를 이용하여 워커들이 스웜 클러스터에 조인한다. 
Swarm initialized: current node (msfctow4b3bn44r6cc6ezqe1f) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-5irkus71dikt64psicehk7s9llthtaik67a7g463eloknjro8z-akz0saaujn5a25i1m4s3q1mrh 211.183.3.100:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

user1@manager01:~$ docker swarm join-token manager    <--- 아래의 내용을 다른 노드에서 실행하면 매니저로 가입된다. 
To add a manager to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-5irkus71dikt64psicehk7s9llthtaik67a7g463eloknjro8z-3vny7i8bdldi2d51161ntd3j9 211.183.3.100:2377

user1@manager01:~$

2. 두번째 방법 
매니저에서 아래 내용을 실행한다.

docker node promote worker01 <-- worker01 을 worker 에서 manager 로 변경시킨다. 


기본 서비스 배포해 보기
user1@manager01:~$ docker service create --name web --replicas 4 -p 80:80 nginx

실행할 서비스의 개수를 수동으로 지정하기 -> --replicas 3 
이 3개가 반드시 워커 노드에서만 실행되는가??? 
특정 노드에 서비스를 배포하고 싶다면 노드에 라벨을 붙여서 배포해야한다. 
또는 노드의 역할에 따라 배포도 가능하다. 즉,  node.role == worker     , node.role != manager
mode global 옵션을 사용하면 모든 서버에 1개의 서비스를 자동으로 배포한다.

user1@manager01:~$ docker service ls
ID             NAME      MODE         REPLICAS   IMAGE          PORTS
jv6k33f37enz   web       replicated   4/4        nginx:latest   *:80->80/tcp
user1@manager01:~$
user1@manager01:~$
user1@manager01:~$
user1@manager01:~$
user1@manager01:~$
user1@manager01:~$ docker service ps web
ID             NAME      IMAGE          NODE        DESIRED STATE   CURRENT STATE           ERROR     PORTS
pdyf5usg6ura   web.1     nginx:latest   manager01   Running         Running 5 minutes ago
d873ss7ogb9q   web.2     nginx:latest   worker01    Running         Running 5 minutes ago
yk5o95ne5cep   web.3     nginx:latest   worker02    Running         Running 5 minutes ago
u6p9e2t2oic5   web.4     nginx:latest   worker03    Running         Running 5 minutes ago
user1@manager01:~$


user1@manager01:~$ docker service rm web
web
user1@manager01:~$ docker service ps web
no such service: web
user1@manager01:~$


user1@manager01:~$ docker service create --name web --constraint 'node.role != manager'  --replicas 2 -p 80:80 nginx
user1@manager01:~$ docker service ps web
ID             NAME      IMAGE          NODE       DESIRED STATE   CURRENT STATE            ERROR     PORTS
gln7bv3p3nak   web.1     nginx:latest   worker01   Running         Running 30 seconds ago
xevsq96swsx7   web.2     nginx:latest   worker02   Running         Running 29 seconds ago
user1@manager01:~$

swarm 모드에서 각 컨테이너 별 설정이 안되므로 아래의 내용을 이용하여  노드 자체를 일시중지 상태로 만들어본다. 또는 중지 상태로 만들어 본다.



user1@manager01:~$ docker service create --name web --constraint 'node.role != manager'  --mode global  -p 80:80 nginx

-> manager 를 제외한 나머지 모든 노드에 공평하게 하나씩 서비스를 배포한다!!!


history :
  60  docker swarm init --advertise-addr 211.183.3.100
   61  docker swarm join-token manager
   62  docker node ls
   63  clear
   64  docker service create --name web --replicas 4 -p 80:80 nginx
   65  docker service ps
   66  docker service ls
   67  docker service ps web
   68  docker service rm web
   69  docker service ps web
   70  docker service create --name web --constraint 'node.role != manager'  --replicas 2 -p 80:80 nginx
   71  docker service ps web
   72  docker service scale web=3
   73  docker service ps web
   74  docker service scale web=4
   75  docker service ps web
   76  docker service scale web=3
   77  docker service ps web
   78  docker container ls
   79  docker service rm babr78du301x
   80  docker service ps babr78du301x
   81  docker service --help
   82  docker service rm --help
   83  docker service rm web --help
   84* docker se
   85  docker service ls
   86  docker service create --name web --constraint 'node.role != manager'  --replicas 2 -p 80:80 nginx
   87  docker service ls
   88  docker service ps web
   89  docker node update --help
   90  docker node update --availability drain worker01
   91  docker node ls
   92  docker service ls
   93  docker service ps web
   94  docker node update --availability active  worker01
   95  docker service ps web
   96  docker node update --availability Active worker01
   97  docker service ps web
   98  docker node update --availability Active worker01
   99  docker service ps web
  100  docker node update --availability Active worker01
  101  docker service ps web
  102  docker node update --help
  103  docker node update --availability active worker01
  104  docker service ps web
  105  docker node ls
  106  docker service scale web=3
  107  docker service ps web
  108  docker service rm web
  109  docker service create --name web --constraint 'node.role != manager'  --mode global  -p 80:80 nginx
  110  docker service ps web
  111
  112  history
user1@manager01:~$



















