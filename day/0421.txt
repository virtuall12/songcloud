도커 설치된 우분투 가상머신 다운로드 위치
https://drive.google.com/file/d/1vS4LBTWHjzcH9Cfld_pnsgLWJdVismhB/view?usp=sharing

PHP-------------------------------
상수의 대표적인 예
true  -> 1
false -> null
			echo PHP_VERSION ; 
			echo "<br>" ;
			echo PHP_OS ;
			echo "<br>" ;
			echo __FILE__ ;
			echo "<br>" ;
			echo __DIR__ ;
			echo "<br>" ;
			echo __LINE__ ;


<?php
	$num = 37 ;
	$result = "3의 배수도 5의 배수도 아니다" ;
	
	if ($num % 3 == 0) $result = "3의 배수이다" ;
	if ($num % 5 == 0) $result = "5의 배수이다" ;
	if ($num % 3 == 0 && $num % 5 == 0) 	$result = "3의 배수이면서 5의 배수" ;
	
	echo "$num : $result" ;
?>






 Quiz. 

 HTML 에서     :  나이를 입력하세요  ____
     
 PHP 에서
           75세 이상이면 입장료는 무료
           60세 이상이면 입장료는 1,000
           50세 이상이면 입장료는 2,000
           나머지는 모두 5,000원~!!




------------ 실습 (나이,복지카드,유공자 등에 따른 입장료 계산)-----------
<!DOCTYPE html>
<html>
<head> 
	<title>0421_PHP테스트</title>
	<style>
		h2 { color: red ; }
	</style>
</head>
<body>
	<h2>PHP 테스트 중</h2>
	<?php
		$age = 75 ;
		$bokji = "no" ;
		$ukong = "no" ;
		$night = "no" ;
		
		if ( $age < 3 )
			$fee = "무료";
		elseif (($age >= 3 && $age <= 13) || ( $night == "yes"))
			$fee = "4,000" ;
		elseif (($age >= 14 && $age <= 18) || ($age >= 70) || ($bokji == "yes") || ($ukong == "yes"))	
			$fee = "8,000" ;
		else
			$fee = "10,000" ;	
		
		// 화면에 출력할 내용
		echo "당신의 나이는 : $age 세 입니다<br>" ;
		echo "복지카드 소지 유무 : $bokji<br>";
		echo "국가유공자 : $ukong<br>" ;
		echo "야간개장 입장 : $night<br>" ;
		echo "[입장료는 $fee 원 입니다]"
			
	?>	

</body>
</html>




--------- 실습 (입력된 3 개의 숫자를 비교하여 큰 수 부터 출력하기)

<?php
	$a = 11 ;
	$b = 6 ;
	$c = 24 ;
	
	if ($a > $b) //$a 가 $b 보다 킅 경우
	{
		if ($a > $c) // $a 가 $c 보다 큰지 비교
		{
			$max1 = $a;  // 가장 큰 수인 $max1 에 $a 저장
			if ($b > $c) // 그 다음 큰 수를 찾기 위해 $b 와 $c 비교
			{
				$max2 = $b; // 두 번째 큰 수인 $max2에 $b 저장
				$max3 = $c; // 세 번째 큰 수인 $max3에 $c 저장
			}
			else 
			{
				$max2 = $c ;
				$max3 = $b ;
			}
		}
		else // $a 가 $b 보다 큰 상태에서 $c 가 $a 보다 큰 경우
		{
			$max1 = $c; //$c 가 가장 크고
			$max2 = $a; //$a 가 두 번째 
			$max3 = $b; //$b 가 세 번째
		}
	}
	else // $b가 $a 보다 큰 경우
	{
		if ($a > $c) //$a 와 $c 비교
		{
			$max1 = $b;
			$max2 = $a;
			$max3 = $c;
		}
		else // $c 가 $a 보다 큰 경우
		{
			if ($b > $c) // $b 와 $c 중에서 가장 큰 수를 찾음
			{
				$max1 = $b; //$b 가 가장 크고
				$max2 = $c; //$c 가 두 번째
				$max3 = $a; //$a 가 세 번째
			}
			else
			{
				$max1 = $c;
				$max2 = $b;
				$max3 = $a;
			}
		}
	}
	echo "입력된 세 정수 : $a $b $c <br>";
	echo "입력된 정수를 큰 수대로 배열 : $max1 $max2 $max3<br>";
?>			




<?php 
	$now_year = 2021 ;
	$now_month = 4;
	$now_day = 21;
	$birth_year = 1978;
	$birth_month = 3;
	$birth_day = 6;

	if( $birth_month <   $now_month  ) // 태어난 달이 현재 달보다 작다면
		$age = $now_year - $birth_year;
	elseif ( $birth_month == $now_month ) //태어난 달이 현재 달과 같다면
	{
		if ( $birth_day <= $now_day ) // 태어난 달과 현재달이 같고, 생일이 1~현재날짜 내에 있다면. 만약 오늘이 10일이고 생일이 5일이라면. 
			$age = $now_year - $birth_year;
		else // 만약 오늘이 10일이고 생일이 15일이라면.즉, 생일 아직 지나지 않음
			$age = $now_year - $birth_year -1;
	}
	else // 생일월이 현재달보다 크다면. 즉, 아직 생일이 지나지 않았음 
		$age = $now_year - $birth_year -1 ;
	echo "오늘 날짜 : $now_year 년 $now_month 월 $now_day 일<br>";
	echo "출생 년월일 : $birth_year 년 $birth_month 월 $birth_day 일생<br>";
	echo "만 나이 : $age 세" ;
?>	


  오늘 : 2021.04.21 
 출생년도 : 1990.03.03
 
 출생월
 1~2, 3월 - 1~21일까지는 => 만나이 = 오늘연도 - 출생연도

 3월 - 11~31, 4~12월 => 만나이  = 오늘연도 - 출생연도 - 1


 =================== 오후 도커 ===============================
 도커 : 자신의 커널을 사용하는 것이 아니라 컨테이너 형식으로 애플리케이션을 동작 시킨다
          커널은 호스트의 커널을 사용하므로 하이퍼바이저를 이용한 추상화 단계가 없으므로
          성능 저하가 거의 발생하지 않는다.
          또한 각 애플리케이션을 컨테이너로 구분하므로 격리도가 높다
          동일한 애플리케이션을 다수 실행할 수 있다. 

          이를 이용하여 RDS 와 비슷한 서비스를 만들 수도 있다.

          컨테이너 서비스는 도커가 유일하지는 않다. 

          cgroup, namespace 라는 리눅스의 기능을 이용하여 구현한 것이다. 
         namespace -> 격리
         cgroup -> 자원 사용 제한 


      Docker    Rocket 
                                      

 도커 라이프 사이클 관리하기(생성->수정->삭제)
     - 컨테이너를 만들기 위해서는 " 이미지 " 가 필요하다
       이미지는 사설, 공인(도커허브), 로컬 저장소를 이용하여 저장된다.
     - 이미지 찾기 : docker search ubuntu:18.04 
       만약 tag(버전 18.04)를 부착하지 않았다면 최신버전의 우분투를 보여준다.
     - 이미지 다운로드 하기 
            user1@docker01:~/0421$ docker pull ubuntu:18.04
       1. 로컬 저장소에 해당 이미지가 있는가를 먼저 확인한다.
       2. 만약 로컬에 해당 이미지가 있다면 추가 다운로드 하지 않는다. 없다면 다운로드 시작

user1@docker01:~/0421$ docker image ls
REPOSITORY   TAG       IMAGE ID       CREATED        SIZE
ubuntu       18.04     3339fde08fc3   3 weeks ago    63.3MB
user1@docker01:~/0421$ 
    - 다운로드한 이미지를 삭제하고 싶다면??? (강제 삭제 : -f = --force )

        user1@docker01:~/0421$ docker image rm ubuntu:18.04 -f

 컨테이너 생성
     - create : 컨테이너 생성, 생성후 중지됨  -> docker container start [컨테이너 ID | 이름]
     - run     : 컨테이너 생성, 생성후 자동으로 실행됨

       docker container run ubuntu /bin/echo "hello world"
         --name  : 지정하지 않으면 자동으로 생성됨, 컨테이너의 이름
         --hostname : 지정하지 않으면 자동으로 생성됨, 컨테이너 내부에서 사용하는 호스트명
         -it : 해당 컨테이너로 연결한다(가상터미널 이용하여)
         -d : 백그라운드에서 동작한다. 주로 서비스를 제공하는 컨테이너들에게 지정하는 옵션
         -p : 호스트의 포트와 컨테이너의 포트를 매핑 -p 8001:80  -> 8001은 호스트의 포트
                 정적 PAT 구성!!! 
         -v  (volume) : 호스트의 특정 공간과 컨테이너의 특정 디렉토리(디스크)를 마운트 
                              호스트 디스크의 일정 공간을 컨테이너의 특정 디스크와 연결한다.
                               다른 컨테이너의 디렉토리를 마운트 할 수 있다(거의 사용하지 않음)
      run -> 
            1. 로컬 이미지 저장소를 검색하여 지정된 이미지를 찾는다. 만약 tag( :0.1) 가 없다면
                최신 버전의 이미지를 찾는다. 
            2. 만약 이미지가 없다면 해당 이미지를 pull 로 도커 허브에서 다운로드한다.
            3. 옵션을 적용하여 컨테이너를 생성하고 실행한다.

user1@docker01:~/0421$ docker container run --name test01 --hostname test001 -it centos:7 /bin/bash 
[root@test001 /]# 

             연결된 컨테이너에서 호스트로 이동할 수 있는 방법
             1. ctrl + c : 컨테이너를 종료한 뒤 빠져 나온다
             2. ctrl + p, ctrl +q : 컨테이너는 여전히 동작한다.

             컨테이너에 적용된 내용은 영구 저장되지는 않는다. 컨테이너 삭제시 해당 데이터도 
             함께 삭제 되므로 중요한 데이터는 백업을 하거나 -v 옵션을 이용하여 호스트의 
             특정 지점에 디스크를 연결하여 사용하는 방법을 적용해야 한다.

              
   컨테이너 삭제하기
             docker container ls -a   ( -a 는 동작중인, 중지중인 모든 컨테이너 확인가능,
                     -a 가 없다면, 동작중인 컨테이너만 확인할 수 있다)

       동작중인 컨테이너는 삭제가 불가하다. 따라서 종료뒤 삭제를 하거나 강제 삭제해야한다
       

user1@docker01:~/0421$ docker container stop 8649aec2d18e
8649aec2d18e
user1@docker01:~/0421$ docker container rm 8649aec2d18e
8649aec2d18e
user1@docker01:~/0421$ 

user1@docker01:~/0421$ docker container rm 0c6a5c63e425 -f
0c6a5c63e425
user1@docker01:~/0421$ 

            종료된 모든 컨테이너를 삭제하고자 한다면 
                docker container prune  

            주말과제!!! - 도커 허브에 계정 만들기!!! 


            도커 허브에 이미지를 올리기 위해서는 이미지 명을 아래와 같이 만들어야 한다.
                  

                                   도커허브ID/이미지이름:태그
              
            도커 허브에있는 이미지중에 ID가 없는 것은 도커에서 올린 기본 이미지이다
             
          

         -w : 작업 디렉토리 지정것

        만약 컨테이너 생성시 -w=/test 라고 했다면 생성된 컨테이너에는 자동으로 /test 라는 디렉토리가 생성되고 연결하게 되면 바로 해당 디렉토리로 이동된 상태에서 접속된다.
   
         -e :  시스템 환경 변수 설정 (전역변수)
          -e WORK=/test 
                컨테이너 내에서 echo $WORK -> /test  로 출력된다.

       설정해야할 변수가 많은 경우에는 파일에 변수를 선언하고 이를 옵션으로 불러오는 방법을 사용할 수 있다.
         --env-file=파일명




       도커 네트워크
       -bridge  : 가상의 스위치를 만든다. 해당 스위치는 자동으로 NAT 된다.
       -host     : 호스트의  IP  주소를 컨테이너와 공유하여 사용한다. 
       -null      : 네트워크 없음
       -overlay : 클러스터로 연결된 모든 서버에 동일한 하나의 네트워크가 생성되고
                      지역에 상관없이 모두 연결된다.


   Mariadb 컨테이너 설정
https://hub.docker.com/_/mariadb

 FROM 은 베이스 이미지를 지정하는 것으로 새로운 이미지의 기본 베이스가 된다.
          FROM 다음에 베이스 이미지를 지정하고 로컬에 없다면 도커 허브에서 다운로드한다.
          가장 윗줄에 작성한다.

 RUN   이미지 내에 필요한 패키지 등을 설치하기 위한 명령의 실행이 가능하도록 해 준다.
             RUN yum -y install httpd php php-mysql git 
           도커 파일 내에서 여러번 사용할 수 있다.

 EXPOSE   생성될 컨테이너에서 오픈할 포트를 지정한다.
                 예를 들어 웹 서버를 사용한다면 
                 EXPOSE 80
                 EXPOSE 443

 CMD   이미지에서가 아니라 컨테이너가 실행된 다음 컨테이너 내에서 실행할 명령어를 작성
 일반적으로 CMD 는 가장 아래에 작성한다. CMD 는 Dockerfile 에서 한번만 사용할 수 있다

 COPY    로컬서버에 있는 파일 또는 디렉토리를 이미지의 특정 디렉토리에 붙여넣기 한다.
 ADD (COPY와 동일하지만 ADD는 압축된 파일이라면 이미지에 압축을 풀어서 붙여넣기 할 수 있고, 웹 상에 있는 파일, git   파일을 붙여넣기 할 수 있다)
 
     



  Quiz. CentOS 를 다운로드 하여 httpd php php-mysql git wget 을 설치하고 80번 포트는 오픈하라. 로컬에 있는 index.html 파일을 이미지의 /var/www/html 에 붙여넣기 하라.
또한 생성된 컨테이너는 웹서비스를 시작할 수 있어야 한다. 

 Dockerfile 을 작성하라.

















     

































