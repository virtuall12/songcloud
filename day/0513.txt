오픈스택 
- 오픈스택 설치 using Packstack(자동화 설치)
- 사용자 추가(그룹:dev -> 사용자:devuser1,devuser2) using cli
- keystone
- neutron (네트워크 서비스)
neutron  에서 제공하는 대표적인 서비스들
1. VPN
(
재택 근무자가 외부에서 회사 내부의 컨트롤러로 접속하기 위한 용도로 사용 - SSLVPN
  사용자->VPN Gateway

본사와 지사간 연결 - IPsec VPN (Site-to-Site VPN)


2. Firewall
3. DHCP
4. LB
5. Switch(Linux Bridge-br0, OpenVswitch),Router(Routing)
- overlay 네트워크

      linux bridge   vs openvswitch
       L2 only                   L4
                                        Routing , QoS, ACL
                                        터널링(gre,vxlan)-> overlay 네트워크 만들 수 있다.
                                        SDN 을 지원한다.


  SDN은 스위치 내부에 있는 data plane/control plane 을 분리하여 운영할 수 있다.
 data plane : MAC 테이블 처리 영역
 control plane : 라우팅, QoS, ACL 등의 처리 가능 

openstack 은 기본적으로 openvswitch 의 VxLAN 기술을 사용하여 터널링을 제공한다.
여러 compute 노드는 VxLAN 을 이용한 터널링이 지원되므로 인스턴스의 이동(마이그레이션)이 자유롭다





외부 네트워크 구성을 위한 설정과 연결
1. openvswitch 기반의 브릿지 : br-ex
eth0 이 br-ex 의 하나의 포트로 동작하도록 설정해 주어야 한다.
eth0 이 현재는 L3 -> L2로 전환해야 한다

해야할 일
br-ex   생성(openvswitch기반)
기존 eth0 은 br-ex 의 하나의 L2포트로 동작해야 한다.

 [root@control network-scripts(keystone_admin)]# cat ifcfg-br-ex
TYPE=OVSBridge
BOOTPROTO=none
NAME=br-ex
DEVICE=br-ex
DEVICETYPE=ovs
ONBOOT=yes
IPADDR=10.5.117.100
PREFIX=8
GATEWAY=10.0.0.1
DNS1=8.8.8.8
NM_CONTROLLED=no

[root@control network-scripts(keystone_admin)]# cat ifcfg-eth0
TYPE=OVSPort
BOOTPROTO=none
NAME=eth0
DEVICE=eth0
DEVICETYPE=ovs
OVS_BRIDGE=br-ex
ONBOOT=yes
NM_CONTROLLED=no
[root@control network-scripts(keystone_admin)]# systemctl restart network

[확인]
# ovs-vsctl show
   [생략]
    Bridge br-ex
        Controller "tcp:127.0.0.1:6633"
            is_connected: true
        fail_mode: secure
        Port phy-br-ex
            Interface phy-br-ex
                type: patch
                options: {peer=int-br-ex}
        Port br-ex
            Interface br-ex
                type: internal
        Port "eth0"
            Interface "eth0"


    [생략]

2. "1" 에서 생성된 br-ex 를 외부 연결용 브릿지로 지정하고 기 생성해 두었던 라우터와 연결하여

  인터넷(10.0.0.1)--eth0(br-ex 브릿지)가상포트---ADMIN_R1---| 172.16.1.0/24
 
외부네트워크 연결을 위해서는 eth0 가 extnet 이라는 physical network 이고 이 extnet 을 extnet:br-ex 형태로 매핑해야 한다. 

openstack network create --provider-physical-network extnet --provider-network-type flat --external ext_net

openstack subnet create ext_net_subnet --network ext_net --subnet-range 10.5.117.0/8 --allocation-pool start=10.5.117.101,end=10.5.117.199 --gateway 10.0.0.1 --dns-nameserver 8.8.8.8 --no-dhcp

 openstack network set --external ext_net





 ML2 플러그인
 오픈스택 내부에 flat, vxlan, vlan, gre 등과 같은 다양한 네트워크 환경 구성 요소를 서로 간에 통신이 가능하도록 지원해 주는 플러그인
 이를 통해 서로 다른 네트워크 타입에 속해있는 인스턴스간 통신이 가능해 진다. 

 overlay 네트워크, 클라우드 환경에서 vlan 을 쓸 수 없는 이유
1. vlan 은 L3 구간을 넘어갈 수 없으므로 두개 이상의 인스턴스가 서로 다른 지역의 서버에 배치되어 있다면 이를 하나의 네트워크로 묶을 수 없다.
2. vlan 은 0~4095 까지 4096개만을 사용할 수 있다. 만약 이를 이용하여 오버레이를 구성한다면 고객(또는 클라이언트 회사)을 4096 명만 유치할 수 있다

VxLAN 은 오버레이를 위한 터널링이 지원되므로 두개 이상의 인스턴스가 서로 다른 지역의 물리 서버(compute node)에 배치되어 있다고 하더라도 하나의 네트워크로 묶을 수 있다.
VxLAN 은 1600만개를 사용할 수 있으므로 다수의 고객을 유치할 수 있다. 


flavor 지정하기

[root@control ~(keystone_admin)]# openstack flavor create --id 6 --vcpus 1 --ram 1024 --disk 10 m1.xsmall
[root@control ~(keystone_admin)]# openstack flavor list
+----+-----------+-------+------+-----------+-------+-----------+
| ID | Name      |   RAM | Disk | Ephemeral | VCPUs | Is Public |
+----+-----------+-------+------+-----------+-------+-----------+
| 1  | m1.tiny   |   512 |    1 |         0 |     1 | True      |
| 2  | m1.small  |  2048 |   20 |         0 |     1 | True      |
| 3  | m1.medium |  4096 |   40 |         0 |     2 | True      |
| 4  | m1.large  |  8192 |   80 |         0 |     4 | True      |
| 5  | m1.xlarge | 16384 |  160 |         0 |     8 | True      |
| 6  | m1.xsmall |  1024 |   10 |         0 |     1 | True      |
+----+-----------+-------+------+-----------+-------+-----------+
[root@control ~(keystone_admin)]#


VNC설정

   공인IP:59XX -----------> 10.5.1.X:5900

    국정완 : 5901
        세흥 :5902
        준혁 :

xsmall 로 인스턴스 만든 뒤, ssh 인증할 때 계정은 
ubuntu 를 입력하면 사용자의 private 키를 서버의 public 키와 매칭시킨 뒤 정상적인 키라면 연결에 성공합니다.

설정에 문제가 없는데 연결이 잘 안되는 분들은 xsmall 로 만든 인스턴스를 삭제하고
small 로 해서 다시 만들어 보세요~ 잘 되네요

인증에 성공하면 
sudo passwd root
test123
test123
su root
apt-get install -y apache2
해서 웹 서버 설치하고 외부에서 floating ip 로 웹 접속 해 보세요!


CLI 로 인스턴스 생성하기
[root@control ~(keystone_admin)]# openstack server create --flavor m1.small --image UBUNTU1804 --security-group WEBSRV_SG --key-name ubuntu1804 --nic net-id=ca961c3b-968e-476e-8d55-5b6c38bc585a WEBSRV2

-임시로 floating ip 를 2번째 인스턴스에 할당
-외부에서 ssh 로 접속하여 apache2 설치한 뒤, 간단히 index.html 파일을 수정
-두 우분투 서버는 sudo passwd root 로 루트 패스워드 미리 지정해 두고
- 웹서버 설치가 끝나면 둘 다 floating ip 는 해제 한뒤, 서버끼리 서로 
   curl 을 이용하여 상대의 웹서버 동작 상태를 확인한다.

인스턴스 (qcow2 -> centos7)
- virt-customize 를 이용하여 실행시 자동으로 docker 가 설치되어 있어야 한다.
- 도커 버전은 docker-ce  최신 버전
- httpd 가 설치되어 있어야 한다.  
- size 는 지정하지 말것!!!

wget http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-2003.qcow2.xz
xz -d CentOS-7-x86_64-GenericCloud-2003.qcow2.xz


virt-customize -a CentOS-7-x86_64-GenericCloud-2003.qcow2 --root-password password:test123 --upload /root/test.sh --firstboot /root/test.sh









